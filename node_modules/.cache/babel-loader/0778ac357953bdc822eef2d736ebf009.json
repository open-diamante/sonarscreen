{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/fromme/projects/SUSE/Sonar/npm-install-grommet/my-app/src/RoutedButton.js\";\n//\n// Author:       Brian Fromme\n// Copyright:    Copyright 2020, Gnu Public License - Version 2.0\n// Credits:      Brian Fromme, Bryan Gartner, Darren Soothill\n// Maintainer:   Brian Fromme\n// Status:       Prototype\n// Description:  Sonar component - leveraged from grommet-sandbox\n//\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { matchPath, withRouter } from \"react-router\";\nimport { Button } from \"grommet\"; // A simple component that shows the pathname of the current location\n\nclass RoutedButton extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onClick = event => {\n      const {\n        history,\n        path\n      } = this.props;\n      event.preventDefault();\n      history.push(path);\n    };\n  }\n\n  render() {\n    const {\n      active,\n      exact,\n      match,\n      location,\n      history,\n      path,\n      strict,\n      ...rest\n    } = this.props;\n    const pathMatch = matchPath(location.pathname, {\n      exact,\n      path,\n      strict\n    });\n    return /*#__PURE__*/_jsxDEV(Button, {\n      active: active && !!pathMatch,\n      ...rest,\n      onClick: this.onClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nRoutedButton.propTypes = {\n  location: PropTypes.object.isRequired,\n  history: PropTypes.object.isRequired,\n  path: PropTypes.string.isRequired\n};\nexport default _c = withRouter(RoutedButton);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/fromme/projects/SUSE/Sonar/npm-install-grommet/my-app/src/RoutedButton.js"],"names":["React","PropTypes","matchPath","withRouter","Button","RoutedButton","Component","onClick","event","history","path","props","preventDefault","push","render","active","exact","match","location","strict","rest","pathMatch","pathname","propTypes","object","isRequired","string"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,UAApB,QAAsC,cAAtC;AACA,SAASC,MAAT,QAAuB,SAAvB,C,CAEA;;AACA,MAAMC,YAAN,SAA2BL,KAAK,CAACM,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAOzCC,OAPyC,GAO/BC,KAAK,IAAI;AACjB,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAoB,KAAKC,KAA/B;AACAH,MAAAA,KAAK,CAACI,cAAN;AACAH,MAAAA,OAAO,CAACI,IAAR,CAAaH,IAAb;AACD,KAXwC;AAAA;;AAazCI,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,KAHI;AAIJC,MAAAA,QAJI;AAKJT,MAAAA,OALI;AAMJC,MAAAA,IANI;AAOJS,MAAAA,MAPI;AAQJ,SAAGC;AARC,QASF,KAAKT,KATT;AAUA,UAAMU,SAAS,GAAGnB,SAAS,CAACgB,QAAQ,CAACI,QAAV,EAAoB;AAAEN,MAAAA,KAAF;AAASN,MAAAA,IAAT;AAAeS,MAAAA;AAAf,KAApB,CAA3B;AACA,wBACE,QAAC,MAAD;AAAQ,MAAA,MAAM,EAAEJ,MAAM,IAAI,CAAC,CAACM,SAA5B;AAAA,SAA2CD,IAA3C;AAAiD,MAAA,OAAO,EAAE,KAAKb;AAA/D;AAAA;AAAA;AAAA;AAAA,YADF;AAGD;;AA5BwC;;AAArCF,Y,CACGkB,S,GAAY;AACjBL,EAAAA,QAAQ,EAAEjB,SAAS,CAACuB,MAAV,CAAiBC,UADV;AAEjBhB,EAAAA,OAAO,EAAER,SAAS,CAACuB,MAAV,CAAiBC,UAFT;AAGjBf,EAAAA,IAAI,EAAET,SAAS,CAACyB,MAAV,CAAiBD;AAHN,C;AA8BrB,oBAAetB,UAAU,CAACE,YAAD,CAAzB","sourcesContent":["//\n// Author:       Brian Fromme\n// Copyright:    Copyright 2020, Gnu Public License - Version 2.0\n// Credits:      Brian Fromme, Bryan Gartner, Darren Soothill\n// Maintainer:   Brian Fromme\n// Status:       Prototype\n// Description:  Sonar component - leveraged from grommet-sandbox\n//\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { matchPath, withRouter } from \"react-router\";\nimport { Button } from \"grommet\";\n\n// A simple component that shows the pathname of the current location\nclass RoutedButton extends React.Component {\n  static propTypes = {\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n    path: PropTypes.string.isRequired,\n  };\n\n  onClick = event => {\n    const { history, path } = this.props;\n    event.preventDefault();\n    history.push(path);\n  };\n\n  render() {\n    const {\n      active,\n      exact,\n      match,\n      location,\n      history,\n      path,\n      strict,\n      ...rest\n    } = this.props;\n    const pathMatch = matchPath(location.pathname, { exact, path, strict });\n    return (\n      <Button active={active && !!pathMatch} {...rest} onClick={this.onClick} />\n    );\n  }\n}\n\nexport default withRouter(RoutedButton);\n\n"]},"metadata":{},"sourceType":"module"}